name: Build LAME Win Mac Linux

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build_lame:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS
            os: macos-latest
            filename: lame
            zipname: LAME-macOSX.zip
          - name: Windows-x86
            os: windows-latest
            arch: x86
            filename: lame32.exe
            zipname: LAME-windows32.zip
          - name: Windows-x64
            os: windows-latest
            arch: x64
            filename: lame64.exe
            zipname: LAME-windows64.zip
          - name: Linux
            os: ubuntu-22.04
            filename: lame
            zipname: LAME-linux.zip
    runs-on: ${{ matrix.os }}
    name: Build LAME on ${{ matrix.name }}
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Download and extract LAME source
      - name: Download and extract LAME source code
        run: |
          curl -LO https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
          tar -xzf lame-3.100.tar.gz
      
      # Remove deprecated symbol
      - name: Remove 'lame_init_old' symbol
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' '/lame_init_old/d' lame-3.100/include/libmp3lame.sym
          else
            sed -i '/lame_init_old/d' lame-3.100/include/libmp3lame.sym
          fi
      
      # Setup MSVC toolchain (Windows)
      - name: Setup MSVC
        if: contains(matrix.name, 'Windows')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      
      # Windows-specific MSVC build
      - name: Build LAME with MSVC (Windows)
        if: contains(matrix.name, 'Windows')
        shell: cmd
        run: |
          cd lame-3.100
          copy configMS.h config.h
          powershell -NoProfile -Command "& {
              $content = Get-Content Makefile.MSVC;
              $updatedContent = $content -replace '/machine:I386', '/machine:${{ matrix.machine }}';
              Set-Content -Path Makefile.MSVC -Value $updatedContent;
          }"
          nmake -f Makefile.MSVC MACHINE=${{ matrix.machine }} comp=msvc asm=no
      
      # macOS build
      - name: Build and install LAME (macOS)
        if: matrix.name == 'macOS'
        run: |
          cd lame-3.100
          export CFLAGS="-arch x86_64 -arch arm64"
          export LDFLAGS="-arch x86_64 -arch arm64"
          ./configure --prefix=$HOME/lame-install
          make
          make install
      
      # Linux build
      - name: Build and install LAME (Linux)
        if: matrix.name == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          cd lame-3.100
          ./configure --prefix=$HOME/lame-install
          make
          make install
      
      # Copy binary to output
      - name: Copy LAME binary to output
        run: |
          mkdir -p output
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp lame-3.100/output/lame.exe ./output/${{ matrix.filename }}
          else
            cp $HOME/lame-install/bin/lame ./output/${{ matrix.filename }}
          fi
      
      # Test the LAME binary
      - name: Test LAME binary
        run: |
          output=$(./output/${{ matrix.filename }} --help)
          echo "$output" # Print the output for visibility
          if echo "$output" | grep -q "version 3.100"; then
            echo "Version check passed."
          else
            echo "Expected 'version 3.100' in output."
            exit 1
          fi

      # Import certificates (macOS)
      - name: Import Certificates (macOS)
        uses: apple-actions/import-codesign-certs@v3
        if: ${{ matrix.name == 'macOS' }}
        with:
          p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
          p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}

      # Codesign (macOS)
      - name: Codesign (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "./output/${{ matrix.filename }}" --deep --strict --options=runtime --timestamp

      # Codesign with Azure Trusted Signing (Windows)
      - name: Codesign with Azure Trusted Signing
        if: contains(matrix.name, 'Windows')
        uses: azure/trusted-signing-action@v0.4.0
        with:
          # The Azure Active Directory tenant (directory) ID.
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}

          # The client (application) ID of an App Registration in the tenant.
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}

          # A client secret that was generated for the App Registration.
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

          # The Code Signing Account endpoint. The URI value must have a URI that aligns to the region your Code Signing Account and Certificate Profile you are specifying were created in during the setup of these resources.
          endpoint: ${{ secrets.AZURE_ENDPOINT }}

          # The Code Signing Account name.
          trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}

          # The Certificate Profile name.
          certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}

          # This signs all exes inside the folder
          files-folder: ./output
          files-folder-filter: exe

      # Package executable (Windows)
      - name: Package LAME executable (Windows)
        if: contains(matrix.name, 'Windows')
        shell: pwsh
        run: |
          Compress-Archive -Path "./output/*" -DestinationPath "${{ matrix.zipname }}"
      
      # Package executable (macOS)
      - name: Package LAME executable (macOS)
        if: contains(matrix.name, 'macOS') || contains(matrix.name, 'Linux')
        run: |
          cd output
          zip -j ../${{ matrix.zipname }} *
      
      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.zipname }}
          path: ${{ matrix.zipname }}
