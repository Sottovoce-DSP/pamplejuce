name: Pamplejuce

on:
  workflow_dispatch:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp

defaults:
  run:
    shell: bash

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:

          - name: macOS
            os: macos-14
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            extra-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

    steps:
      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      # This block can be removed once 15.1 is default (JUCE requires it when building on macOS 14)
      - name: Use latest Xcode on system (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true # Get JUCE populated

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Import App Certificate (macOS)
        uses: apple-actions/import-codesign-certs@v3
        if: ${{ matrix.name == 'macOS' }}
        with:
          p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
          p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
          keychain: "app_signing_temp"  # No .keychain extension

      - name: Import Installer Certificate (macOS)
        uses: apple-actions/import-codesign-certs@v3
        if: ${{ matrix.name == 'macOS' }}
        with:
          p12-file-base64: ${{ secrets.DEV_ID_INSTALL_CERT }}
          p12-password: ${{ secrets.DEV_ID_INSTALL_PASSWORD }}
          keychain: "installer_signing_temp"  # No .keychain extension

      - name: Add Both Keychains to Search List (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          security list-keychains -d user -s app_signing_temp.keychain installer_signing_temp.keychain $(security list-keychains -d user | tr -d '"')

      - name: Configure
        run: cmake -B ${{ env.BUILD_DIR }} -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ${{ matrix.extra-flags }} .

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

      - name: Read in .env from CMake # see GitHubENV.cmake
        run: |
          cat .env # show us the config
          cat .env >> $GITHUB_ENV # pull in our PRODUCT_NAME, etc

      - name: Set additional env vars for next steps
        run: |
          ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
          echo "AUV3_PATH=$ARTIFACTS_PATH/AUv3/${{ env.PRODUCT_NAME }}.appex" >> $GITHUB_ENV
          echo "STANDALONE_PATH=$ARTIFACTS_PATH/Standalone/${{ env.PRODUCT_NAME }}.app" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

      - name: Codesign (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          # Each plugin must be code signed
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.VST3_PATH }}" --deep --strict --options=runtime --timestamp
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.AU_PATH }}" --deep --strict --options=runtime --timestamp
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.STANDALONE_PATH }}" --deep --strict --options=runtime --timestamp

      - name: Add Custom Icons (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          # add the icns as its own icon resource (meta!)
          sips -i packaging/icon_file.icns

          # Grab the resource, put in tempfile
          DeRez -only icns packaging/icon_file.icns > /tmp/icons

          # Stuff the resource into the strange Icon? file's resource fork
          Rez -a /tmp/icons -o "${{ env.VST3_PATH }}/Icon"$'\r'
          Rez -a /tmp/icons -o "${{ env.AU_PATH }}/Icon"$'\r'

          # Set custom icon attribute
          SetFile -a C "${{ env.VST3_PATH }}"
          SetFile -a C "${{ env.AU_PATH }}"

      - name: Create DMG, Notarize and Staple (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          # workaround for https://github.com/LinusU/node-appdmg/issues/234
          python3 -m pip install setuptools --break-system-packages
          npm install -g appdmg
          mkdir -p packaging/dmg

          # Create directories for the dmg symlinks
          sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/Components && sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/VST3
          ln -s /Library/Audio/Plug-Ins/Components "packaging/dmg/Your Mac's Component folder"
          ln -s /Library/Audio/Plug-Ins/VST3 "packaging/dmg/Your Mac's VST3 folder"
          mv "${{ env.VST3_PATH }}" packaging/dmg
          mv "${{ env.AU_PATH }}" packaging/dmg
          mv "${{ env.STANDALONE_PATH }}" packaging/dmg

          # Run appdmg to create the .dmg
          cd packaging && appdmg dmg.json "${{ env.ARTIFACT_NAME}}.dmg"
          codesign -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" --timestamp -i ${{ env.BUNDLE_ID }} --force "${{ env.ARTIFACT_NAME }}.dmg"
          xcrun notarytool submit "${{ env.ARTIFACT_NAME }}.dmg" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
          xcrun stapler staple "${{ env.ARTIFACT_NAME }}.dmg"

      - name: Upload DMG (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.dmg
          path: packaging/${{ env.ARTIFACT_NAME }}.dmg

      - name: Remove Temporary Keychains (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          security delete-keychain app_signing_temp.keychain || true
          security delete-keychain installer_signing_temp.keychain || true

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          # download-artifact puts these files in their own dirs...
          # Using globs sidesteps having to pass the version around
          files: |
            */*.exe
            */*.zip
            */*.dmg
