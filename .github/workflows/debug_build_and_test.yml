# ___                 _        _                ___ ___ 
# | _ \__ _ _ __  _ __| |___ _ | |_  _ __ ___   / __|_ _|
# |  _/ _` | '  \| '_ \ / -_) || | || / _/ -_) | (__ | | 
# |_| \__,_|_|_|_| .__/_\___|\__/ \_,_\__\___|  \___|___|
#                |_|                                     

name: YAML Build and Test

# Recent Change List
# - Strip binary symbols after testing, before codesign (November 1 2024)

# [===================================================================]
# [================ Global Variables Needed By Runner ================]
# [===================================================================]

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:  # lets you run a build from the UI
  #push:
  #pull_request:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp
  SHOULD_STRIP_SYMBOLS: false
  TEST_SYMBOL: processBlock

defaults:
  run:
    shell: bash

jobs:
  build_and_test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS
            os: macos-14
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            extra-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
            lameFilename: lame

    steps:
      - name: Set number of cores
        run: |
          echo "Determining number of cores..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            CORES=$(nproc)
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            CORES=$(sysctl -n hw.ncpu)
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            CORES=$NUMBER_OF_PROCESSORS
          else
            echo "Unknown OS. Defaulting to 2 cores."
            CORES=2
          fi
          echo "NUMBER_OF_CORES=$CORES" >> $GITHUB_ENV
          echo "Detected $CORES cores"

      - name: Set PRODUCT_NAME and VERSION
        run: |
          echo "PRODUCT_NAME=MyAwesomePlugin" >> $GITHUB_ENV
          echo "VERSION=1.2.3" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Save main repo commit to file (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: git rev-parse HEAD > main_repo_commit.txt

      - name: Save git submodule output to file
        run: |
          git submodule > git_submodule_versions.txt

      - name: Upload submodule output artifact (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: git_submodule_versions.txt
          path: git_submodule_versions.txt

      - name: Upload main module output artifact (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: main_repo_commit.txt
          path: main_repo_commit.txt

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_DRIVE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_DRIVE_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true
          token_format: 'access_token'
          delegates: satbir@sottovocedsp.com

      - name: Install Python Dependencies
        run: |
          python3 -m pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib --break-system-packages

      - name: Create Drive API Script
        run: |
          cat > list_folders.py <<EOF
          import os
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.errors import HttpError

          SCOPES = [
              'https://www.googleapis.com/auth/drive.metadata',
              'https://www.googleapis.com/auth/drive',
              'https://www.googleapis.com/auth/admin.directory.user.readonly',
              'https://www.googleapis.com/auth/userinfo.email'
          ]

          def build_service():
              try:
                  credentials = service_account.Credentials.from_service_account_file(
                      os.environ['GOOGLE_APPLICATION_CREDENTIALS'],
                      scopes=SCOPES,
                      subject='satbir@sottovocedsp.com'
                  )
                  
                  service = build('drive', 'v3', credentials=credentials)
                  
                  about = service.about().get(fields="user").execute()
                  print(f"Authenticated as: {about['user']['emailAddress']}")
                  
                  return service
              except Exception as e:
                  print(f"Failed to build service: {e}")
                  raise

          def list_all_folders(service):
              query = "mimeType='application/vnd.google-apps.folder' and trashed=false"
              page_token = None
              while True:
                  try:
                      response = service.files().list(
                          q=query,
                          spaces='drive',
                          fields='nextPageToken, files(id, name, owners)',
                          pageToken=page_token
                      ).execute()
                      for folder in response.get('files', []):
                          owners = [owner.get('emailAddress') for owner in folder.get('owners', [])]
                          print(f"Folder Name: {folder.get('name')}, ID: {folder.get('id')}, Owners: {owners}")
                      page_token = response.get('nextPageToken', None)
                      if page_token is None:
                          break
                  except HttpError as e:
                      print(f"An error occurred while listing folders: {e}")
                      raise

          def main():
              service = build_service()
              print("Listing all accessible folders:")
              list_all_folders(service)

          if __name__ == "__main__":
              main()
          EOF

      - name: List Accessible Folders
        run: |
          echo "Listing all accessible folders for the impersonated user..."
          python3 list_folders.py > accessible_folders.txt
          cat accessible_folders.txt
          mkdir -p debug
          mv accessible_folders.txt debug/
          echo "Accessible folders listed above."

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            *.exe
            *.dmg
            git_submodule_versions.txt
            main_repo_commit.txt