#  ___                 _        _                ___ ___ 
# | _ \__ _ _ __  _ __| |___ _ | |_  _ __ ___   / __|_ _|
# |  _/ _` | '  \| '_ \ / -_) || | || / _/ -_) | (__ | | 
# |_| \__,_|_|_|_| .__/_\___|\__/ \_,_\__\___|  \___|___|
#                |_|                                     

name: YAML Build and Test

# Recent Change List
# - Strip binary symbols after testing, before codesign (November 1 2024)
# - Fixed path handling and tool installation (December 23 2024)

on:
  workflow_dispatch: # lets you run a build from the UI
  #push:
  #pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp
  SHOULD_STRIP_SYMBOLS: true
  TEST_SYMBOL: processBlock

defaults:
  run:
    shell: bash

jobs:
  build_and_test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
            pluginval-binary: ./pluginval.exe
            lameFilename: lame.exe

    steps:
      - name: Set number of cores
        run: |
          echo "Determining number of cores..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            CORES=$(nproc)
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            CORES=$(sysctl -n hw.ncpu)
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            CORES=$NUMBER_OF_PROCESSORS
          else
            echo "Unknown OS. Defaulting to 2 cores."
            CORES=2
          fi
          echo "NUMBER_OF_CORES=$CORES" >> $GITHUB_ENV
          echo "Detected $CORES cores"

      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install Cygwin and Required Tools
        if: runner.os == 'Windows'
        run: |
          echo "Installing Cygwin and tools..."
          # Install base Cygwin
          choco install -y cygwin
          # Install specific Cygwin packages using Cygwin's setup
          C:/tools/cygwin/cygwinsetup.exe -q -P binutils,strings
          # Verify Cygwin installation
          if [ ! -d "C:/tools/cygwin" ]; then
            echo "Error: Cygwin installation not found"
            exit 1
          fi
          # Add Cygwin to PATH
          echo "C:/tools/cygwin/bin" >> $GITHUB_PATH
          echo "Cygwin installed successfully."

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Configure
        run: |
          cmake -B ${{ env.BUILD_DIR }} \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                ${{ matrix.extra-flags }} \
                .

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel ${{ env.NUMBER_OF_CORES }}

      - name: Read in .env from CMake
        run: |
          cat .env
          cat .env >> $GITHUB_ENV

      - name: Set additional env vars for next steps
        run: |
          ARTIFACTS_PATH="${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}"
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
          echo "AUV3_PATH=$ARTIFACTS_PATH/AUv3/${{ env.PRODUCT_NAME }}.appex" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

      - name: Set Windows-specific paths
        if: runner.os == 'Windows'
        run: |
          # Normalize path with forward slashes and escape spaces
          VST_PATH="${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PRODUCT_NAME }}.vst3"
          VST_PATH="${VST_PATH// /\\ }"
          echo "VST3_PATH_WINDOWS=${VST_PATH}" >> $GITHUB_ENV

      - name: Verify VST3 path
        if: runner.os == 'Windows'
        run: |
          echo "Checking VST3 path: ${{ env.VST3_PATH_WINDOWS }}"
          if [ ! -f "${{ env.VST3_PATH_WINDOWS }}" ]; then
            echo "Error: VST3 file not found"
            exit 1
          fi

      - name: Test if symbol exists (Check 1 - dumpbin)
        if: matrix.name == 'Windows'
        run: |
          echo "Checking for symbol '${{ env.TEST_SYMBOL }}' using dumpbin..."
          dumpbin /SYMBOLS "${{ env.VST3_PATH_WINDOWS }}" | findstr "${{ env.TEST_SYMBOL }}" || echo "Symbol not found (dumpbin)."

      - name: Test if symbol exists (Check 2 - strings)
        if: matrix.name == 'Windows'
        run: |
          echo "Checking for symbol '${{ env.TEST_SYMBOL }}' using strings..."
          if command -v strings &> /dev/null; then
            strings "${{ env.VST3_PATH_WINDOWS }}" | findstr "${{ env.TEST_SYMBOL }}"
          elif [ -f "C:/tools/cygwin/bin/strings" ]; then
            "C:/tools/cygwin/bin/strings" "${{ env.VST3_PATH_WINDOWS }}" | findstr "${{ env.TEST_SYMBOL }}"
          else
            echo "Warning: strings utility not found"
          fi || echo "Symbol not found (strings)."

      - name: Test if symbol exists (Check 3 - Cygwin)
        if: runner.os == 'Windows'
        run: |
          echo "Checking for symbol '${{ env.TEST_SYMBOL }}' using Cygwin..."
          if [ -f "C:/tools/cygwin/bin/strings" ]; then
            "C:/tools/cygwin/bin/strings" "${{ env.VST3_PATH_WINDOWS }}" | grep "${{ env.TEST_SYMBOL }}" || echo "Symbol not found (Cygwin)."
          else
            echo "Warning: Cygwin strings utility not found"
          fi

      - name: Strip binary symbols (Windows)
        if: ${{ matrix.name == 'Windows' && env.SHOULD_STRIP_SYMBOLS == 'true' }}
        run: |
          echo "Stripping symbols from '${{ env.VST3_PATH_WINDOWS }}'..."
          if command -v strip &> /dev/null; then
            strip "${{ env.VST3_PATH_WINDOWS }}"
            echo "Symbols stripped successfully."
          else
            echo "Error: strip command not found"
            exit 1
          fi

      - name: Test if symbol was stripped (Final Verification)
        if: ${{ matrix.name == 'Windows' && env.SHOULD_STRIP_SYMBOLS == 'true' }}
        run: |
          echo "Verifying symbol '${{ env.TEST_SYMBOL }}' post-strip..."
          if dumpbin /SYMBOLS "${{ env.VST3_PATH_WINDOWS }}" | findstr "${{ env.TEST_SYMBOL }}"; then
            echo "Error: Symbol still exists after strip."
            exit 1
          else
            echo "Symbol successfully removed."
          fi

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            *.exe
            *.dmg
            git_submodule_versions.txt
            main_repo_commit.txt