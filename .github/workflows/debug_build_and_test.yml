#  ___                 _        _                ___ ___ 
# | _ \__ _ _ __  _ __| |___ _ | |_  _ __ ___   / __|_ _|
# |  _/ _` | '  \| '_ \ / -_) || | || / _/ -_) | (__ | | 
# |_| \__,_|_|_|_| .__/_\___|\__/ \_,_\__\___|  \___|___|
#                |_|                                     

name: YAML Build and Test

# Recent Change List
# - Strip binary symbols after testing, before codesign (November 1 2024)

# [===================================================================]
# [================ Global Variables Needed By Runner ================]
# [===================================================================]

# For Google Drive upload
permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch: # lets you run a build from the UI
  #push:
  #pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp
  SHOULD_STRIP_SYMBOLS: false
  TEST_SYMBOL: processBlock
  # Removed USER_TO_IMpersonate since impersonation is handled in authentication

defaults:
  run:
    shell: bash

# [======================================]
# [================ Jobs ================]
# [======================================]

jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: macOS
            os: macos-14
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            extra-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
            lameFilename: lame

    steps:

      # [====================================================]
      # [================ Setup Environments ================]
      # [====================================================]

      - name: Set number of cores
        run: |
          echo "Determining number of cores..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            CORES=$(nproc)
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            CORES=$(sysctl -n hw.ncpu)
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            CORES=$NUMBER_OF_PROCESSORS
          else
            echo "Unknown OS. Defaulting to 2 cores."
            CORES=2
          fi
          echo "NUMBER_OF_CORES=$CORES" >> $GITHUB_ENV
          echo "Detected $CORES cores"

      - name: Set PRODUCT_NAME and VERSION
        run: |
          echo "PRODUCT_NAME=MyAwesomePlugin" >> $GITHUB_ENV
          echo "VERSION=1.2.3" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Save main repo commit to file (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: git rev-parse HEAD > main_repo_commit.txt

      - name: Save git submodule output to file
        run: |
          git submodule > git_submodule_versions.txt

      - name: Upload submodule output artifact (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: git_submodule_versions.txt
          path: git_submodule_versions.txt

      - name: Upload main module output artifact (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: main_repo_commit.txt
          path: main_repo_commit.txt

      # [========================================================]
      # [================ Authenticate to Google Cloud ============]
      # [========================================================]

      - name: Authenticate and Configure Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_DRIVE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_DRIVE_SERVICE_ACCOUNT }}
          create_credentials_file: true
          export_environment_variables: true
          token_format: 'access_token'

      # [========================================================]
      # [================ Install Python Dependencies ===========]
      # [========================================================]

      - name: Install Python Dependencies for Drive Upload
        run: |
          python3 -m pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib --break-system-packages

      # [========================================================]
      # [====================== Upload To Drive =================]
      # [========================================================]

      - name: Upload Files to Drive
        env:
          IMPERSONATED_USER: satbir@sottovocedsp.com
          RELEASES_FOLDER_ID: ${{ secrets.RELEASES_FOLDER_ID }}
        run: |
          set -e

          # Python script to upload files
          python3 <<EOF
          import os
          import google.auth
          import google.auth.impersonated_credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          # We already have ADC (Application Default Credentials) from google-github-actions/auth
          # Now we create impersonated credentials to act as satbir@sottovocedsp.com
          target_principal = os.environ.get("IMPERSONATED_USER")
          release_folder_id = os.environ.get("RELEASES_FOLDER_ID")

          # Scopes required for Drive file upload
          scopes = [
              'https://www.googleapis.com/auth/drive',
              'https://www.googleapis.com/auth/drive.file',
              'https://www.googleapis.com/auth/drive.metadata'
          ]

          # Get default credentials (the service account from WIF)
          creds, _ = google.auth.default()

          # Impersonate the target user
          impersonated_creds = google.auth.impersonated_credentials.Credentials(
              source_credentials=creds,
              target_principal=target_principal,
              target_scopes=scopes,
              lifetime=3600
          )

          service = build('drive', 'v3', credentials=impersonated_creds)

          def upload_file(filename, folder_id):
              file_metadata = {
                  'name': filename,
                  'parents': [folder_id]
              }
              media = MediaFileUpload(filename, resumable=True)
              file = service.files().create(body=file_metadata, media_body=media, fields='id, owners').execute()
              print(f"Uploaded {filename} with file ID {file.get('id')} and owners {file.get('owners')}")

          # Upload the two files
          upload_file('git_submodule_versions.txt', release_folder_id)
          upload_file('main_repo_commit.txt', release_folder_id)

          EOF

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            *.exe
            *.dmg
            git_submodule_versions.txt
            main_repo_commit.txt