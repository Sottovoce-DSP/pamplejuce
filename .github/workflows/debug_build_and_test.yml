#  ___                 _        _                ___ ___ 
# | _ \__ _ _ __  _ __| |___ _ | |_  _ __ ___   / __|_ _|
# |  _/ _` | '  \| '_ \ / -_) || | || / _/ -_) | (__ | | 
# |_| \__,_|_|_|_| .__/_\___|\__/ \_,_\__\___|  \___|___|
#                |_|                                     

name: YAML Build and Test

# Recent Change List
# - Strip binary symbols after testing, before codesign (November 1 2024)

# [===================================================================]
# [================ Global Variables Needed By Runner ================]
# [===================================================================]

on:
  workflow_dispatch: # lets you run a build from the UI
  #push:
  #pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp
  SHOULD_STRIP_SYMBOLS: true
  TEST_SYMBOL: processBlock

defaults:
  run:
    shell: bash

# [======================================]
# [================ Jobs ================]
# [======================================]

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: Windows
            os: windows-latest
            pluginval-binary: ./pluginval.exe
            lameFilename: lame.exe

    steps:

      # [====================================================]
      # [================ Setup Environments ================]
      # [====================================================]

      # Figure out how many cores we have to work with
      - name: Set number of cores
        run: |
          echo "Determining number of cores..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            CORES=$(nproc)
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            CORES=$(sysctl -n hw.ncpu)
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            CORES=$NUMBER_OF_PROCESSORS
          else
            echo "Unknown OS. Defaulting to 2 cores."
            CORES=2
          fi
          echo "NUMBER_OF_CORES=$CORES" >> $GITHUB_ENV
          echo "Detected $CORES cores"

      # Setup MSVC toolchain and developer command prompt (Windows)
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install Cygwin
        if: runner.os == 'Windows'
        run: |
          echo "Installing Cygwin..."
          choco install -y cygwin
          echo "Cygwin installed successfully."

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true # Get JUCE populated

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.5

      # [=======================================]
      # [================ Build ================]
      # [=======================================]

      - name: Configure
        run: |
          cmake -B ${{ env.BUILD_DIR }} \
                -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                ${{ matrix.extra-flags }} \
                .

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel ${{ env.NUMBER_OF_CORES }}

      # [=====================================================]
      # [================ Setup Git Variables ================]
      # [=====================================================]

      - name: Read in .env from CMake # see GitHubENV.cmake
        run: |
          cat .env # show us the config
          cat .env >> $GITHUB_ENV # pull in our PRODUCT_NAME, etc

      - name: Set additional env vars for next steps
        run: |
          ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "VST3_PATH=$ARTIFACTS_PATH/VST3/${{ env.PRODUCT_NAME }}.vst3" >> $GITHUB_ENV
          echo "AU_PATH=$ARTIFACTS_PATH/AU/${{ env.PRODUCT_NAME }}.component" >> $GITHUB_ENV
          echo "AUV3_PATH=$ARTIFACTS_PATH/AUv3/${{ env.PRODUCT_NAME }}.appex" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

      - name: Set Windows-specific paths
        if: runner.os == 'Windows'
        run: |
          echo "VST3_PATH_WINDOWS=${{ env.VST3_PATH }}" >> $GITHUB_ENV

    # [====================================================]
      # [============= Windows Symbol Verification ==========]
      # [====================================================]

      - name: Test if symbol exists (Windows)
        if: ${{ matrix.name == 'Windows' && env.SHOULD_STRIP_SYMBOLS == 'true' }}
        run: |
          echo "Checking for symbol '${{ env.TEST_SYMBOL }}' in ${{ env.VST3_PATH_WINDOWS }}"
          dumpbin /SYMBOLS "${{ env.VST3_PATH_WINDOWS }}" | findstr "${{ env.TEST_SYMBOL }}" && exit 0 || (echo "Symbol not found"; exit 1)

      - name: Strip binary symbols (Windows)
        if: ${{ matrix.name == 'Windows' && env.SHOULD_STRIP_SYMBOLS == 'true' }}
        run: |
          BINARY_PATH=${{ env.VST3_PATH_WINDOWS }}
          echo "Stripping symbols from ${{ env.VST3_PATH_WINDOWS }}"
          strip "${{ env.VST3_PATH_WINDOWS }}"
          echo "Symbols stripped successfully."

      - name: Test if symbol was stripped (Windows)
        if: ${{ matrix.name == 'Windows' && env.SHOULD_STRIP_SYMBOLS == 'true' }}
        run: |
          echo "Verifying symbol '${{ env.TEST_SYMBOL }}' is gone from ${{ env.VST3_PATH_WINDOWS }}"
          dumpbin /SYMBOLS "${{ env.VST3_PATH_WINDOWS }}" | findstr "${{ env.TEST_SYMBOL }}" && (echo "Symbol still exists. Strip failed."; exit 1) || echo "Symbol successfully removed."

      - name: Test if symbol exists with Cygwin
        if: runner.os == 'Windows'
        run: |
          echo "Testing symbol existence with Cygwin tools..."
          C:/tools/cygwin/bin/strings "${{ env.VST3_PATH_WINDOWS }}" | grep "${{ env.TEST_SYMBOL }}" && echo "Symbol found with Cygwin." || (echo "Symbol not found with Cygwin."; exit 1)
  
  # [=========================================]
  # [================ Release ================]
  # [=========================================]

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            *.exe
            *.dmg
            git_submodule_versions.txt
            main_repo_commit.txt
