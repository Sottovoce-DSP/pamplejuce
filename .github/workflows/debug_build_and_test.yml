#  ___                 _        _                ___ ___ 
# | _ \__ _ _ __  _ __| |___ _ | |_  _ __ ___   / __|_ _|
# |  _/ _` | '  \| '_ \ / -_) || | || / _/ -_) | (__ | | 
# |_| \__,_|_|_|_| .__/_\___|\__/ \_,_\__\___|  \___|___|
#                |_|                                     

name: YAML Build and Test

# Recent Change List
# - Strip binary symbols after testing, before codesign (November 1 2024)

# [===================================================================]
# [================ Global Variables Needed By Runner ================]
# [===================================================================]

# For Google Drive upload
permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch: # lets you run a build from the UI
  #push:
  #pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp
  SHOULD_STRIP_SYMBOLS: false
  TEST_SYMBOL: processBlock
  GOOGLE_DRIVE_CLIENT_ID: ${{ secrets.GOOGLE_DRIVE_CLIENT_ID }}
  GOOGLE_DRIVE_CLIENT_SECRET: ${{ secrets.GOOGLE_DRIVE_CLIENT_SECRET }}
  GOOGLE_DRIVE_REFRESH_TOKEN: ${{ secrets.GOOGLE_DRIVE_REFRESH_TOKEN }}
  GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}

defaults:
  run:
    shell: bash

# [======================================]
# [================ Jobs ================]
# [======================================]

jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: macOS
            os: macos-14
            pluginval-binary: pluginval.app/Contents/MacOS/pluginval
            extra-flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
            lameFilename: lame

    steps:

      # [====================================================]
      # [================ Setup Environments ================]
      # [====================================================]

      # Step to set Unix timestamp
      - name: Set UNIX_TIMESTAMP
        run: |
          UNIX_TIMESTAMP=$(date +%s)
          echo "UNIX_TIMESTAMP=$UNIX_TIMESTAMP" >> $GITHUB_ENV
          echo "Timestamp: $UNIX_TIMESTAMP"

      - name: Set number of cores
        run: |
          echo "Determining number of cores..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            CORES=$(nproc)
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            CORES=$(sysctl -n hw.ncpu)
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            CORES=$NUMBER_OF_PROCESSORS
          else
            echo "Unknown OS. Defaulting to 2 cores."
            CORES=2
          fi
          echo "NUMBER_OF_CORES=$CORES" >> $GITHUB_ENV
          echo "Detected $CORES cores"

      - name: Set PRODUCT_NAME and VERSION
        run: |
          echo "PRODUCT_NAME=MyAwesomePlugin" >> $GITHUB_ENV
          echo "VERSION=1.2.3" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get short Git commit hash
        run: |
          SHORT_HASH=$(git rev-parse --short HEAD)
          echo "SHORT_GIT_COMMIT_HASH=$SHORT_HASH" >> $GITHUB_ENV

      - name: Save main repo commit to file (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: git rev-parse HEAD > main_repo_commit.txt

      - name: Save git submodule output to file
        run: |
          git submodule > git_submodule_versions.txt

      - name: Upload submodule output artifact (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: git_submodule_versions.txt
          path: git_submodule_versions.txt

      - name: Upload main module output artifact (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: main_repo_commit.txt
          path: main_repo_commit.txt

      - name: Install Python Dependencies for Drive Upload
        run: |
          pip3 install google-api-python-client google-auth-httplib2 google-auth-oauthlib pytz --break-system-packages

      # [========================================================]
      # [================ Create Python Scripts ==================]
      # [========================================================]

      - name: Create Python Upload Script
        run: |
          cat > upload_to_drive.py <<EOF
          import os
          import sys
          import datetime
          import pytz
          from google.auth.transport.requests import Request
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          def getDateTime(unix_timestamp):
            try:
                # Convert UNIX timestamp to a UTC datetime object
                utc_now = datetime.datetime.fromtimestamp(int(unix_timestamp), tz=datetime.timezone.utc)

                # Convert UTC to EST
                est_timezone = pytz.timezone("US/Eastern")
                est_now = utc_now.astimezone(est_timezone)

                # Format the date and time
                now_str = est_now.strftime("%b %d %Y %-I:%M%p")  # Example: "Dec 16 2024 4:35pm"

                # Return the formatted string
                return now_str
            except Exception as e:
                print(f"Failed to process UNIX timestamp: {e}")
                raise

          def build_service():
              try:
                  # Throw error if any of the required environment variables are missing
                  if not os.getenv("GOOGLE_DRIVE_CLIENT_ID"):
                      raise ValueError("Missing required environment variables GOOGLE_DRIVE_CLIENT_ID")
                  if not os.getenv("GOOGLE_DRIVE_CLIENT_SECRET"):
                      raise ValueError("Missing required environment variables GOOGLE_DRIVE_CLIENT_SECRET")
                  if not os.getenv("GOOGLE_DRIVE_REFRESH_TOKEN"):
                      raise ValueError("Missing required environment variables GOOGLE_DRIVE_REFRESH_TOKEN")
                  if not os.getenv("GOOGLE_DRIVE_FOLDER_ID"):
                      raise ValueError("Missing required environment variables GOOGLE_DRIVE_FOLDER_ID")

                  # Load credentials from environment
                  creds = Credentials(
                      None,
                      refresh_token=os.getenv("GOOGLE_DRIVE_REFRESH_TOKEN"),
                      client_id=os.getenv("GOOGLE_DRIVE_CLIENT_ID"),
                      client_secret=os.getenv("GOOGLE_DRIVE_CLIENT_SECRET"),
                      token_uri="https://oauth2.googleapis.com/token"
                  )
                  creds.refresh(Request())  # Refresh access token

                  # Build Google Drive API service
                  service = build('drive', 'v3', credentials=creds)
                  
                  return service
              except Exception as e:
                  print(f"Failed to build service with impersonation: {e}")
                  raise

          def find_shared_folder(service, name, parent_id=None, create_if_not_found=False):
              query_parts = [
                  f"name='{name}'",
                  "mimeType='application/vnd.google-apps.folder'",
                  "trashed=false"
              ]
              if parent_id:
                  query_parts.append(f"'{parent_id}' in parents")

              query = " and ".join(query_parts)
              try:
                  results = service.files().list(
                      q=query,
                      spaces='drive',
                      fields='files(id, name)',
                      pageSize=1000
                  ).execute()
                  files = results.get('files', [])
              except HttpError as e:
                  print(f"An error occurred while listing folders: {e}")
                  sys.exit(1)

              if not files:
                  if create_if_not_found:
                      print(f"Folder '{name}' not found. Creating it...")
                      folder_metadata = {
                          'name': name,
                          'mimeType': 'application/vnd.google-apps.folder'
                      }
                      if parent_id:
                          folder_metadata['parents'] = [parent_id]
                      try:
                          folder = service.files().create(
                              body=folder_metadata,
                              fields='id'
                          ).execute()
                          print(f"Created folder '{name}' with ID: {folder.get('id')}")
                          return folder.get('id')
                      except HttpError as e:
                          print(f"Failed to create folder '{name}': {e}")
                          sys.exit(1)
                  else:
                      print(f"Error: Could not find folder '{name}'.")
                      sys.exit(1)

              if len(files) > 1:
                  print(f"Warning: Multiple folders named '{name}' found. Using the first one: {files[0]['id']}")

              return files[0]['id']

          def main():
              service = build_service()

              # Use the pre-shared top-level folder "Releases" 
              ROOT_FOLDER_NAME = "Releases"
              ROOT_FOLDER_OWNER = "satbir@sottovocedsp.com"
              DRIVE_NEW_OWNER = "satbir@sottovocedsp.com"
              PRODUCT_NAME = os.getenv('PRODUCT_NAME')
              VERSION = os.getenv('VERSION')
              UNIX_TIMESTAMP = os.getenv('UNIX_TIMESTAMP')

              if not PRODUCT_NAME or not VERSION:
                  print("PRODUCT_NAME or VERSION is not set.")
                  sys.exit(1)

              # Find the root 'Releases' folder 
              root_folder_id = os.getenv('GOOGLE_DRIVE_FOLDER_ID')

              # Within the root 'Releases' folder, find or create the plugin folder
              plugin_folder_id = find_shared_folder(service, PRODUCT_NAME, parent_id=root_folder_id, create_if_not_found=True)

              # Create a version-specific subfolder within the plugin folder
              date_time = getDateTime(UNIX_TIMESTAMP)
              SHORT_HASH = os.getenv('SHORT_GIT_COMMIT_HASH', 'unknown')
              version_folder_name = f"Release v{VERSION} {date_time} ({SHORT_HASH})"
              version_folder_id = find_shared_folder(service, version_folder_name, parent_id=plugin_folder_id, create_if_not_found=True)

              # Upload artifacts
              for artifact_path in sys.argv[1:]:
                  if not os.path.exists(artifact_path):
                      print(f"Warning: {artifact_path} does not exist. Skipping.")
                      continue
                  file_name = os.path.basename(artifact_path)
                  media = MediaFileUpload(artifact_path, resumable=True)
                  body = {'name': file_name, 'parents': [version_folder_id]}
                  try:
                      uploaded_file = service.files().create(body=body, media_body=media, fields='id').execute()
                      print(f"Uploaded {artifact_path}")
                  except HttpError as error:
                      print(f"Failed to upload {artifact_path}: {error}")
                      continue

              # Set output using environment files
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  fh.write(f"VERSION_FOLDER_ID={version_folder_id}\n")

          if __name__ == "__main__":
              main()
          EOF

      # [========================================================]
      # [================ Upload To Google Drive ================]
      # [========================================================]

      - name: Upload macOS Artifacts to Google Drive
        if: ${{ matrix.name == 'macOS' }}
        run: |
          echo "Uploading macOS artifacts to Google Drive..."
          DMG_PATH="packaging/${{ env.ARTIFACT_NAME }}.dmg"
          SUBMODULE_PATH="git_submodule_versions.txt"
          COMMIT_PATH="main_repo_commit.txt"
          python3 upload_to_drive.py "$DMG_PATH" "$SUBMODULE_PATH" "$COMMIT_PATH"

  # [=========================================]
  # [================ Release ================]
  # [=========================================]

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          files: |
            *.exe
            *.dmg
            git_submodule_versions.txt
            main_repo_commit.txt
